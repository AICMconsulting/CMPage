---
interface Props {
  title: string;
  content: string[];
  bgColor?: string;
  textColor?: string;
}

const { title, content, bgColor = 'bg-white', textColor = 'text-gray-600' } = Astro.props;
---

<section class={`py-32 relative ${bgColor} overflow-hidden`} data-parallax>
  <div class="container mx-auto px-4">
    <div class="max-w-4xl mx-auto">
      <div class="relative">
        <div class="absolute inset-0 bg-gradient-to-r from-corporate-blue/5 via-corporate-yellow/5 to-corporate-blue/5 rounded-3xl transform rotate-1"></div>
        <div class="relative bg-white rounded-2xl shadow-xl p-12 backdrop-blur-sm transform hover:scale-[1.01] transition-all duration-500" data-gsap="fade-up">
          <div class="absolute inset-0 bg-gradient-to-br from-corporate-blue/5 to-corporate-yellow/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
          <h2 class="text-4xl font-bold text-corporate-blue mb-12 text-center reveal-text">
            <span class="relative">
              {title}
              <span class="absolute -bottom-2 left-0 w-full h-1 bg-corporate-yellow transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500"></span>
            </span>
          </h2>
          <div class={`space-y-8 ${textColor}`}>
            {content.map((paragraph, index) => (
              <p class="text-lg leading-relaxed reveal-text" style={`transition-delay: ${index * 100}ms`}>
                {paragraph}
              </p>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="absolute inset-0 -z-10">
    <div class="floating-shapes"></div>
  </div>
  <div class="absolute inset-0 pointer-events-none">
    <div class="absolute top-0 left-1/4 w-72 h-72 bg-corporate-yellow/10 rounded-full mix-blend-multiply filter blur-xl animate-blob"></div>
    <div class="absolute top-0 right-1/4 w-72 h-72 bg-corporate-blue/10 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000"></div>
    <div class="absolute bottom-0 left-1/3 w-72 h-72 bg-corporate-yellow/10 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000"></div>
  </div>
</section>

<style>
  .floating-shapes {
    position: absolute;
    width: 100%;
    height: 100%;
    background-image: 
      radial-gradient(circle at 20% 30%, rgba(22, 50, 89, 0.05) 0%, transparent 50%),
      radial-gradient(circle at 80% 70%, rgba(255, 203, 9, 0.05) 0%, transparent 50%);
    animation: float 20s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0) scale(1); }
    50% { transform: translateY(-30px) scale(1.1); }
  }

  .reveal-text {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .reveal-text.visible {
    opacity: 1;
    transform: translateY(0);
  }

  @keyframes blob {
    0%, 100% { transform: translate(0, 0) scale(1); }
    25% { transform: translate(20px, -20px) scale(1.1); }
    50% { transform: translate(-20px, 20px) scale(0.9); }
    75% { transform: translate(20px, 20px) scale(1.1); }
  }

  .animate-blob {
    animation: blob 10s infinite;
  }

  .animation-delay-2000 {
    animation-delay: 2s;
  }

  .animation-delay-4000 {
    animation-delay: 4s;
  }
</style>

<script>
  const observeElements = () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, { 
      threshold: 0.2,
      rootMargin: '0px 0px -10% 0px'
    });

    document.querySelectorAll('.reveal-text').forEach(el => observer.observe(el));
  };

  document.addEventListener('astro:page-load', observeElements);
  observeElements();
</script>